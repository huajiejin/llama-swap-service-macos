# Define the map of valid API keys.
# It reads the API key from the 'X-API-Key' header.
# If the key exists in api_keys.conf, it sets $authorized to 1. Otherwise, 0.
# map $http_x_api_key $authorized {
#     default 0;
#     include /etc/nginx/api_keys.conf;
# }

# Define a map to extract the Bearer token from the Authorization header.
# It checks if the header starts with "Bearer " and captures the token.
map $http_authorization $bearer_token {
    ~^Bearer\s+(.*)$ $1;
    default "";
}
# Define the map of valid Bearer tokens.
# It reads the extracted token.
# If the token exists in bearer_tokens.conf, it sets $authorized to 1. Otherwise, 0.
map $bearer_token $authorized {
    default 0;
    include /etc/nginx/api_keys.conf;
}

server {
    listen 80;
    server_name localhost;

    location /v1/ {
        # Check if the request is authorized.
        if ($authorized = 0) {
            return 401 '{"error": "Unauthorized"}\n'; # Return 401 if API key is missing or invalid
        }

        # If authorized, proxy the request to your backend.
        proxy_pass http://host.docker.internal:11000/v1/;

        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

	location /upstream/ {
        auth_basic "Restricted Area";
        auth_basic_user_file /etc/nginx/.htpasswd;

        proxy_pass http://host.docker.internal:11000/upstream/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location / {
        return 404 '{"error": "Not Found"}\n';
    }
}
